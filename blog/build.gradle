buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.5.2.RELEASE")
	}
}

plugins {
	id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'war'
	id "com.dorongold.task-tree" version "2.1.0"
	id 'checkstyle'
	id 'pmd'
	id 'de.aaschmid.cpd' version '3.3'
	id "com.github.spotbugs" version "5.0.4"
}

group = 'com.mjovanc'
version = '0.0.1'
sourceCompatibility = '16'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-core'
	implementation group: 'org.springframework.data', name: 'spring-data-commons', version: '2.5.2'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.5.9'
	implementation group: 'com.h2database', name: 'h2', version: '1.4.200'

	runtimeOnly 'org.postgresql:postgresql'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

war {
	enabled = true
	archiveClassifier = ''
}



//---------------------------------------------------------------------------------
// STATIC CODE ANALYSIS CONFIGURATION
//---------------------------------------------------------------------------------

checkstyle {
	toolVersion = '8.12'
	ignoreFailures = false
	configFile = file("${projectDir}/gradle/static-code-analysis/checkstyle/checkstyle.xml")
}

pmd {
	toolVersion = '6.7.0'
	ignoreFailures = false
	ruleSetFiles = files("${projectDir}/gradle/static-code-analysis/pmd/ruleset.xml")
	ruleSets = []
	rulesMinimumPriority = 3
}

cpd {
	language = 'java'
	toolVersion = '6.1.0'
	minimumTokenCount = 200 // approximately 5-10 lines
}

cpdCheck {
	reports {
		text.enabled = true
		xml.enabled = false
	}
	ignoreAnnotations = true
	source = sourceSets.main.allJava // only java, groovy and scala classes in 'main' sourceSets
}

spotbugsMain {
	reports {
		html {
			required = true
			outputLocation = file("$projectDir/build/reports/spotbugs/main/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
	}
	excludeFilter = file("${projectDir}/gradle/static-code-analysis/spotbugs/spotbugs-exclude.xml")
}


//---------------------------------------------------------------------------------
// TASKS
//---------------------------------------------------------------------------------

tasks.withType(Checkstyle) {
	reports {
		xml.enabled false
		html.enabled true
	}
}

tasks.withType(Pmd) {
	reports {
		xml.enabled false
		html.enabled true
	}
}

task printVersion {
	doLast {
		println project.version
	}
}
